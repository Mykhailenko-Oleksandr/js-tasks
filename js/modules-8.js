// Делегування подій
// event.stopPropagation()
// event.stopImmediatePropagation()

// Палітера кольорів
// nodeName

// Підключення бібліотеки










/////////////////////////////////////////////// event.stopPropagation() ////////////////////////////////////////////////////////

// Зупиняє "спливання" події в DOM - дереві.Це означає, що жоден батьківський елемент не зможе відловити цю подію.
// Не заважає іншим обробникам подій виконуватися на тому ж самому елементі.





/////////////////////////////////////////////// event.stopImmediatePropagation() ////////////////////////////////////////////////////////

// Зупиняє "спливання" події так само, як event.stopPropagation().
// Також зупиняє виконання всіх інших обробників подій, які слухають цю ж подію на даному елементі,
//     навіть якщо вони були зареєстровані перед цим.



// !!!  Не припиняйте спливання без необхідності.
//  Припинення спливання створює свої підводні камені, які потім доводиться обходити.Наприклад, вебаналітика
//  використовує спливання, щоб відстежувати дії користувача на сторінці, тому якщо зупинити спливання подій,
//  то це унеможливить збір цієї інформації.





/////////////////////////////////////////////// Палітера кольорів ////////////////////////////////////////////////////////

// const colorPalette = document.querySelector(".color-palette");
// const output = document.querySelector(".output");

// colorPalette.addEventListener("click", selectColor);

// // This is where delegation «magic» happens
// function selectColor(event) {
//     if (event.target.nodeName !== "BUTTON") {
//         return;
//     }

//     const selectedColor = event.target.dataset.color;
//     output.textContent = `Selected color: ${selectedColor}`;
//     output.style.color = selectedColor;
// }

// // Some helper functions to render palette items
// createPaletteItems();

// function createPaletteItems() {
//     const items = [];
//     for (let i = 0; i < 60; i++) {
//         const color = getRandomHexColor();
//         const item = document.createElement("button");
//         item.type = "button";
//         item.dataset.color = color;
//         item.style.backgroundColor = color;
//         item.classList.add("item");
//         items.push(item);
//     }
//     colorPalette.append(...items);
// }

// function getRandomHexColor() {
//     const letters = "0123456789ABCDEF";
//     let color = "#";

//     for (let i = 0; i < 6; i++) {
//         color += letters[Math.floor(Math.random() * 16)];
//     }

//     return color;
// }




/////////////////////////////////////////////// nodeName ////////////////////////////////////////////////////////

// Для перевірки типу елемента використовуємо властивість nodeName.

// function selectColor(event) {
//     if (event.target.nodeName !== "BUTTON") {
//         return; // користувач клікнув між кнопками
//     }

//     const selectedColor = event.target.dataset.color; // користувач клікнув на кнопку і ми маємо доступ
// до її атрибутів
// }





/////////////////////////////////////////////// Підключення бібліотеки ////////////////////////////////////////////////////////

// Для прикладу підключимо до проєкту бібліотеку Lodash через CDN.Підключення JavaScript бібліотеки через CDN
// складається з декількох кроків.

// Крок 1. Для початку зайди на сайт CDN сервісу https://www.jsdelivr.com/ і знайди необхідну бібліотеку за її ім'ям.

// Крок 2. У списку результатів обери необхідну бібліотеку, клікнувши на назву.Після переходу за посиланням,
//     ти опинишся на сторінці з інформацією про бібліотеку.

// Крок 3. Скопіюй HTML - код тега script, після чого відкрий свій HTML - файл і додай посилання на скрипт
//     бібліотеки наприкінці HTML - документа, як показано в прикладі.

// < !DOCTYPE html >
//     <html lang="en">
//         <head>
//             <!-- head tags -->
//         </head>
//         <body>
//             <!-- HTML-markup -->

//             <!-- Lodash library script file -->
//             <script async src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
//             <!-- Your script file -->
//             <script defer src="path/to/script.js"></script>
//         </body>
//     </html>


// Підключення скрипта бібліотеки має бути до підключення твого основного файлу скриптів.
// Не забудь додати тегу script бібліотеки атрибут async.Це потрібно для того, щоб файл бібліотеки завантажувався якомога швидше.

// Тепер ти можеш отримати доступ до бібліотеки у своєму скрипті.

// При підключенні бібліотек через CDN, до об'єкта window додається властивість, у якій зберігається те, що надає бібліотека. Ім'я цієї властивості унікальне для бібліотеки та описане в її документації.

// Для Lodash — це символ нижнього підкреслення _.

//     console.log(_); // Весь об'єкт бібліотеки Lodash

// Для перевірки використовуй методи:

// sum — він обчислює суму значень у масиві
// shuffle — створює масив перетасованих значень

// console.log(_.sum([4, 2, 8, 6])); // 20
// console.log(_.sum([5, 10])); // 15

// console.log(_.shuffle([1, 2, 3, 4])); // [4, 1, 3, 2]
// console.log(_.shuffle([1, 2, 3, 4])); // [3, 2, 1, 4]


// Зверни увагу! Спосіб підключення та використання бібліотек може відрізнятися залежно від конкретної бібліотеки.

// Усі сучасні бібліотеки надають документацію та приклади використання на своїх офіційних вебсайтах,
//     що може допомогти глибше розібратися в їхньому функціоналі.





///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////




///////////////////////////////////////////////  ////////////////////////////////////////////////////////



